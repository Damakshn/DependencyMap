Порядок разбора (приблизительный)
--------------------------------------------------------------------------------

Классы и их роли
--------------------------------------------------------------------------------
Reader - работа с читаемыми данными на уровне символов/строк/байтов
Tokenizer - дробление данных на токены
Parser - обработка поступающих токенов
Constructor - формирование структур данных
Composer - компоновка структур данных

Состояния парсера
--------------------------------------------------------------------------------
Читаем заголовок объекта
	Ожидаемые токены: идентификатор объекта
	Читаем идентификатор, чекаем следующий токен, если это ':', то читаем присвоение типа
	Если читаем присвоение типа, то чекаем следующий токен, это должен быть идентификатор
	Переходим к чтению содержимого объекта;
Чтение содержимого объекта
	Ожидаемые токены: заголовок объекта, идентификатор (свойство)
	Если нашли заголовок объекта, переходим к этому состоянию
	Если нашли идентификатор, то это свойство, переходим в новое состояние
Читаем свойство
	Чекаем следующий токен, если это не '=', кидаем ошибку
	Чекаем следующий токен, если это скаляр или одна из последовательностей и переходим в новое состояние
	После завершения чтения свойства перейти в предыдущее состояние (item или ogject_content)
Читаем скаляр
	Число с - в начале, запрещены ведущие нули, строка в кавычках и без
Читаем ()
	Ожидаемые токены: идентификатор, строка в кавычках, +, )
	Если нашли идентификатор, пушим его в структуру
	Строка в кавычках - пушим в структуру, запоминаем
	+ - дальше должна быть строка в кавычках, прибавляем её к запомненной предыдущей строке
	Конец последовательности - возврат в предыдущее состояние
Читаем <>
	Ожидаемые токены: item, >
	Если нашли item, читаем его через соответствующее состояние
	Если нашли конец последовательности, возвращаемся в предыдущее состояние
Читаем []
	Ожидаемые токены: идентификатор, конец последовательности
	Если нашли идентификатор, то интерпретируем его как строковый литерал
	Если нашли конец последовательности, возвращаемся в предыдущее состояние
Читаем {}
	Ожидаемые токены:
Читаем item
	Ожидаемые токены: идентификатор, 'end'
	Если нашли идентификатор, читаем его как свойство, затем возвращаемся в предыдущее состояние (чтение item)
	Если нашли конец элемента, то возвращаемся в предыдущее состояние (чтение последовательности <>)

переход между состояниями - self.states.pop()
при переборе последовательности в список состояний опять пушится перебор последовательности, 
а после разбора очередного элемента делается self.states.pop()

Формирование структур данных
--------------------------------------------------------------------------------
Нужно всегда держать в какой-то переменной ссылку на заполняемую в данный момент 
структуру данных, после того, как заполнение закончено, ссылка должна измениться;